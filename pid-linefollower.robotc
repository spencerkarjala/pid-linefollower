#pragma config(Sensor, S2,      colorSensor,  sensorEV3_Color)
#pragma config(Sensor, S3,      ultraSensor,  sensorEV3_Ultrasonic)
#pragma config(Motor,  motorB,  leftMotor,    tmotorEV3_Large, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motorC,  rightMotor,   tmotorEV3_Large, PIDControl, driveRight, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//global variables for PID algorithm
const float DV = 24.5;			//desired value
float integral = 0.0;				//integral value
float  prevError = 0;				//counts the previous error
const float Kp = 0.22;			//proportional gain
const float Ki = 0.0021;		//integral gain
const float Kd = 3.0;				//differential gain

void lineFollowPID();
void drive( int dir );
void moveObject();

task main(){

	while (1){
		//if an object is detected, move it
		if( getUSDistance( ultraSensor ) < 10.0 ){
			moveObject();
		}
		//run PID algorithm for movement
		lineFollowPID();
	}
}

//calculates the ratio that the wheels should spin at
void drive( int dir ){

	int leftSpeed, rightSpeed;
	//if everything is ok, drive straight
	if( dir==0 ){
		leftSpeed  = 35;
		rightSpeed = 35;
	}

	//if on table, turn right
	else if( dir<0 ){
		leftSpeed  = 21 -  dir    *1.2;
		rightSpeed = 21 - (dir*dir*2.5);
	}

	//if on tape, turn left
	else if( dir>0 ){
		leftSpeed  = 21 - (dir*dir*2.5);
		rightSpeed = 21 +  dir    *1.2;
	}

	setMotorSpeed( leftMotor, leftSpeed );
	setMotorSpeed( rightMotor, rightSpeed );
	return;
}

//this function performs a PID algorithm to move the robot along a line
void lineFollowPID(){

	float CV, proportional, derivative, total;

//get current color value of tape
	CV = getColorReflected( colorSensor );

	//proportional & integral & derivative calculation
	proportional =   (DV - CV) * Kp;
	integral    += ( (DV - CV) * Ki );
	derivative   = ( (DV - CV) - prevError ) * Kd;

	//calculate total for PID
	total = proportional + integral + derivative;

	//display PID values
	displayCenteredBigTextLine( 2, "%0.2f", proportional );
	displayCenteredBigTextLine( 4, "%0.2f", integral     );
	displayCenteredBigTextLine( 6, "%0.2f", derivative   );
	displayCenteredBigTextLine( 8, "%0.2f", total        );
	displayCenteredBigTextLine( 10, "%0.2f", getUSDistance( ultraSensor ) );

	//calculate error for current run
	prevError = DV - CV;

	//send PID values to drive function
	drive( total );

	return;
}

//this function moves an object within 10cm of the robot
void moveObject(){

	//stop the bot
	setMotorSpeed( leftMotor,  0 );
	setMotorSpeed( rightMotor, 0 );

	//stop for 2sec
	delay( 2000 );

	//play a beep
	playTone( 440, 100 );

	//move the object
	moveMotorTarget(leftMotor,  120, 5 );
	moveMotorTarget(rightMotor, 550, 25 );

	//let the motors finish
	waitUntilMotorStop( leftMotor  );
	waitUntilMotorStop( rightMotor );

	//stop the bot
	setMotorSpeed( leftMotor,  0 );
	setMotorSpeed( rightMotor, 0 );

	//move back
	moveMotorTarget(leftMotor,  120, -5);
	moveMotorTarget(rightMotor, 550, -25);

	//let the motors finish
	waitUntilMotorStop( leftMotor  );
	waitUntilMotorStop( rightMotor );

	return;
}
